Rubyのパッケージとしてのgem
１つ目はRubyのパッケージ（ライブラリともいいます）としてのgemです。パッケージとは、プログラムの部品で便利な機能をひとまとめにしたものです。パッケージを使用することで、自分で1からコードを書くことなく機能を実装することができ、開発効率が大きく上がります。
ライブラリをパッケージ化
Rubyのgemにも便利なものがたくさんあり、例えば、ユーザー登録機能や認証機能といった複雑な機能も、gemを使えば簡単に実装可能です。本記事ではgemという言葉は主にこちらの意味で使っています。

パッケージ管理システムとしてのgem
２つ目は各gem（パッケージ）を管理するシステムであるRubyGemsを指してgemと呼ぶパターンです。
パッケージ管理システムはgemパッケージのインストールやアンインストールなどの操作に使います。しかし、最近ではRubyGemsを使ってgemを管理する機会は少なく、「bundler」というパッケージ管理ツールを使うことが多いです。
bundlerについてもあわせてご紹介します。

bundlerとは
bundlerとはgemを管理するためのツールで、bundler自体もgemの一種です。
bundlerを使うことで、複数のgemの依存関係を保ちながらgemの管理ができます。


railsアプリにgemをインストールする方法
bundle install
bundle update
この違いを理解していなければ、バグが発生してアプリが動かなくなることもある
bundle installとは
bundle installとは、bundlerを使ってGemfileからgemをインストールするコマンドです。
bundle installで実行することは以下の３つです。
Gemfile.lockでどのgemがinstallされているか確認する
Gemfile.lockを確認した後にGemfileに記述されているgemを確認する
Gemfile.lockにないgemをGemfileから見つけた場合、そのgemをインストールする。

bundle installの説明を最後にまとめると

ポイント
Gemfile.lockにないgemをGemfileから探し、見つけたgemをinstallする
--pathオプションを使えば、どこにインストールするか指定できる(よくあるのはvendor/bundle)
アプリの中にインストールすればgemはアプリの中に、
もし指定がなければ~/.rbenv/versions/projectのrubyバージョン/lib/ruby/gems/projectのrubyバージョン(x.x.0)/gemsにインストール

Ruby on RailsでWebシステムを開発するなら、bundlerの導入は必須
本番環境と開発環境のgemは、全く同じバージョンが使われているでしょうか。bundlerを使っていれば、同じバージョンの環境が作れます。まずは、bundlerの役割について解説

bundlerは、gemの依存関係とバージョンを管理するためのツールです。
なお、bundlerが管理するgemとは、RubyGemsが公開しているRubyのパッケージ、または、そのパッケージを管理する仕組みの名称で、
Ruby on Railsによる開発には欠かせません。

そもそも、Ruby on Railsをインストールする際にも、gemコマンドを利用するくらいです。
しかし、利用するgemの数が多くなると、gemコマンドをマニュアル操作で実行するだけでは管理できません。

そこでgemを管理するためのツール、bundlerが使われています。
これを利用することで、チーム全員の開発環境を同じgemに統一したり、開発するシステムに合わせてgemのバージョンを切り替える、といったことが可能です。


gemのバージョンによる違いが大きい
先ほど、Ruby on RailsでWebシステムを開発するなら、bundlerの導入は必須と書きましたが、チームで開発する場合、bundlerが特に効果を発揮します。

なお、チームで開発する場合、開発環境にインストールされたgemのバージョンを合わせることが重要です。それは、gemによっては頻繁にバージョンアップが行われており、バージョンが違うことで正常に動作しないことがよくあるからです。

その点、bundlerでは、設定ファイルに利用するgemやそのバージョンを記述しておけば、簡単なコマンドでそのgemをインストールできます。そして、チームで同じ設定ファイルを使っていれば、全く同じ環境の構築が可能です。

bundlerを利用する場合の注意点
何度も説明しているように、Ruby on Railsによる開発ではbundlerの利用は必須です。しかし、このような管理ツールを導入する場合、注意してほしい点が幾つかあります。中でも注意してほしいのが次の2点です。

まず、gemをインストールするフォルダまたはディレクトリに注意してください。幾つかのプロジェクトを並行して進めるような場合は、本番環境に合わせた開発環境の切り替えが必要です。gemをどこに置いたかを、きちんと把握していなと、間違ったバージョンを使ってしまうかもしれません。

また、gemの管理は、gemコマンドでも可能です。そのため、gemコマンドとbundlerコマンドの両方を使っていると、特定のバージョンを使う予定が最新版にアップデートされていたり、また、その逆のケースもあるなど混乱してしまいます。bundlerを使うと決めたら、gemの操作を全てbundlerを使うよう徹底してください。


bundle exec コマンド
bundle installコマンドでインストールしたgemに、PATHが通っているとは限りません。そして、多くの場合、PATHが通っていないことで、gemコマンドの実行、およびrubyのプログラムからの参照に失敗します。

bundle installコマンドでインストールしたgemを利用するには、bundle exec から実行しなければなりません。例えば、railsコマンドを実行する場合、bundlerを使ってインストールしたgemを利用した場合は、次のコマンドを実行します。

bundle execの使用例
 
$ bundle exec rails s
この例では、「rails s」を実行する際、bundlerを使ってインストールしたgemを利用しているので、「bundle exec」から実行しています。



bundle install --path=.bundle
上のように --path オプションを用いて
作業用ディレクトリ配下に gem ファイルをインストールすることがポイントです。
このオプションにより、gem は　.bundle というディレクトリの中にインストールされます。



このオプションを付けないと rbenv で指定したバージョンの
Ruby そのものに紐付いて gem がインストールされてしまいます。

そうすると、同じバージョンの Ruby を利用している
他のプロジェクトがある場合には、予期せぬ影響を与えてしまうため注意しましょう。



これで Gemfile 内で唯一指定した通りのバージョンの
Rails がインストールされているはずです。







gemは以下のように個別に手動インストールする事が可能です。
gem install "sinatra"
gem install "unicorn"
gem install "omniauth"
しかし、様々なgem(ライブラリ)を組み合わせて使っていると「gemAのver1とgemBのVer2はうまく動くけど、最新バージョン同士だとうまく動かない。」という互換性の問題が出てくる場合があります。
また、複数人、複数環境で開発を行う場合は、各環境で使うライブラリの名前、バージョンを合わせる必要があります。
こういった場合に、gem同士の互換性を保ちながら各gemの導入、管理を行ってくれるのがBundlerです。
Gemfileというファイルにインストールしたいgemを記述し、それを元にbundlerを使ってインストールを行います。
bundler本体以外のgemは基本的にbundler経由でインストールを行うのがおすすめです。


補足：Gemfileでのバージョン指定方法
なお、Gemfile 内の gem 情報の書き方に応じ、gem のバージョンを指定することができます。
以下に書き方の例を提示しておきます。

記法	インストールされるバージョン
gem 'rails'	最新のバージョン
gem 'rails', '6.0.0'	バージョンを一意に指定 (6.0.0 を必ずインストールしようとする)
gem 'rails', '>= 6.0.0'	6.0.0 以上の最新
gem 'rails', '~> 6.0'	6.0 以上、7.0 未満の最新 (メジャーバージョンを維持)
今回の Gemfile のようにバージョン指定無しの場合は、常に最新版をインストールします。


なお、Gemfile.lock は bundler が自動で書き換えてくれるものなので、
特別な理由がない限り手動では書き換えないように注意しましょう。

1.bundleで削除
$ bundle exec gem uninstall gemname
Springとか使ってる場合は ./bin/bundle を指定すれば良いと思う

2.Gemfileから削除
Gemfileから該当Gem部分を削除

3.Gemfile.lockから削除
bundle update または bundle installでGemfile.lockの中身を更新する


Gemfileに入れたgemを記録してlockに自動で書き換え
installもuninstallもgemfileで書き換える