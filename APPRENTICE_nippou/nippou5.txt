【APPRENTICE_日報_5】
日付:2023/10/20(金)
筆記者:義積拓野
〇行った事
①Questを一通り終わらせた
②提出Questを少し行った。(①+② 9.5h)
③チームプロダクトの構想、ミーティングの準備(0.5h)

①Quest
・オブジェクト指向の問題も一応要件通り動くがスマートではないコードになっている。
誰かにコードレビューして欲しい。明日何も見ずにもう一度作ってみて定着させる。

②提出Quest
・提出Questの製作取り掛かった。まだクラスの感覚になれていないのでまず思いつくままに書き始めていって少しずつ関数化、ある程度関数がまとまっていけばクラス化というやり方をとることにした。
・step1の骨子となる挙動は書くことが出来たが、一回しか引けない、burstしてもループ抜けれない、カード被りありなど直すことも多い。Rubyにもsetがあることを知ったので被り判定に次回導入してみる。

③チームプロダクト
やろうとしていた案も当然の如く既に上位互換のサービスが存在してうーむとなっている。
まだまだひよっこエンジニアであることを自覚し、背伸びせずチーム開発のノウハウを学んでいくことを重視して早めに開発に取り掛かりたい。

〇やる事
・オブジェクト指向のQuest何も見ずに書く
・提出クエストの問題解決してstep1終わらせる
・引き続きチームプロダクトの構想と開発でやるべきことを整理する
・ABC用にRubyでAtCoderの問題解く


〇感想
・Pythonで学んでいたオブジェクト指向の概念はある程度は掴みやすいが違いを無意識的にPythonの仕様で補完してしまって誤解をしていることがある。
(ex：モジュールについての解釈違い、クラスの隠蔽についてなど)
似たプログラミング言語を学ぶことで混ざるのは少々面倒だが、何故言語が使い分けられているか少しずつ立体的に見えるようになってきて理解が深まるようになった。

・行き詰ったときにChatGPT(3.5)の力に頼りすぎていてデバッグ力が付かない気がする。実務で無意識的にソースコードベタ張りしてしまった日にはクビが吹っ飛ぶのでもう少し付き合い方を考えたい。どういう質問をすると間違った答えが返ってきやすいか少しずつ分かるようになってきた。


・Rubocopを山浦さんがdiscordに貼っていただいた設定にしてコードチェック。
コードを整形してくれるのはありがたいが、シングル、ダブルコーテーションの使い分けとreturnが冗長だと取り締まられるのは少し腑に落ちない。Rubyのコーディング規約では メソッドの値を返す場合は必ずreturnを使用 と書いているのに...
しかしネストが深くなりそうなら先に冒頭部分で例外処理を書いて可読性を高めるGuard Clauseという概念はRubocopで知れてよかった。

・GitHubのプルリクの件は解決しました。

・明日のABC目標:Rubyで素早く2完して3問目に時間残したい。3完。
